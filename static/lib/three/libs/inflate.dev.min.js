/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */(function() {'use strict';function m(a){throw a;}var q=void 0,aa=this;function s(a,c){var d=a.split("."),b=aa;!(d[0]in b)&&b.execScript&&b.execScript("var "+d[0]);for(var e;d.length&&(e=d.shift());)!d.length&&c!==q?b[e]=c:b=b[e]?b[e]:b[e]={}};var u="undefined"!==typeof Uint8Array&&"undefined"!==typeof Uint16Array&&"undefined"!==typeof Uint32Array&&"undefined"!==typeof DataView;function x(a){var c=a.length,d=0,b=Number.POSITIVE_INFINITY,e,g,f,l,h,k,n,p,t,y;for(p=0;p<c;++p)a[p]>d&&(d=a[p]),a[p]<b&&(b=a[p]);e=1<<d;g=new (u?Uint32Array:Array)(e);f=1;l=0;for(h=2;f<=d;){for(p=0;p<c;++p)if(a[p]===f){k=0;n=l;for(t=0;t<f;++t)k=k<<1|n&1,n>>=1;y=f<<16|p;for(t=k;t<e;t+=h)g[t]=y;++l}++f;l<<=1;h<<=1}return[g,d,b]};function ba(a,c){this.g=[];this.h=32768;this.d=this.f=this.a=this.j=0;this.input=u?new Uint8Array(a):a;this.k=!1;this.e=z;this.o=!1;if(c||!(c={}))c.index&&(this.a=c.index),c.bufferSize&&(this.h=c.bufferSize),c.bufferType&&(this.e=c.bufferType),c.resize&&(this.o=c.resize);switch(this.e){case A:this.b=32768;this.c=new (u?Uint8Array:Array)(32768+this.h+258);break;case z:this.b=0;this.c=new (u?Uint8Array:Array)(this.h);break;default:m(Error("invalid inflate mode"))}}var A=0,z=1,ca={q:A,p:z};
ba.prototype.i=function(){for(;!this.k;){var a=B(this,3);a&1&&(this.k=!0);a>>>=1;switch(a){case 0:var c=this.input,d=this.a,b=this.c,e=this.b,g=c.length,f=q,l=q,h=b.length,k=q;this.d=this.f=0;d+1>=g&&m(Error("invalid uncompressed block header: LEN"));f=c[d++]|c[d++]<<8;d+1>=g&&m(Error("invalid uncompressed block header: NLEN"));l=c[d++]|c[d++]<<8;f===~l&&m(Error("invalid uncompressed block header: length verify"));d+f>c.length&&m(Error("input buffer is broken"));switch(this.e){case A:for(;e+f>b.length;){k=
h-e;f-=k;if(u)b.set(c.subarray(d,d+k),e),e+=k,d+=k;else for(;k--;)b[e++]=c[d++];this.b=e;b=D(this);e=this.b}break;case z:for(;e+f>b.length;)b=E(this,{m:2});break;default:m(Error("invalid inflate mode"))}if(u)b.set(c.subarray(d,d+f),e),e+=f,d+=f;else for(;f--;)b[e++]=c[d++];this.a=d;this.b=e;this.c=b;break;case 1:switch(this.e){case z:da(this,ea,fa);break;case A:ga(this,ea,fa);break;default:m(Error("invalid inflate mode"))}break;case 2:for(var n=B(this,5)+257,p=B(this,5)+1,t=B(this,4)+4,y=new (u?Uint8Array:
Array)(H.length),ja=q,T=q,U=q,v=q,V=q,J=q,C=q,r=q,ka=q,r=0;r<t;++r)y[H[r]]=B(this,3);if(!u){r=t;for(t=y.length;r<t;++r)y[H[r]]=0}ja=x(y);v=new (u?Uint8Array:Array)(n+p);r=0;for(ka=n+p;r<ka;)switch(V=I(this,ja),V){case 16:for(C=3+B(this,2);C--;)v[r++]=J;break;case 17:for(C=3+B(this,3);C--;)v[r++]=0;J=0;break;case 18:for(C=11+B(this,7);C--;)v[r++]=0;J=0;break;default:J=v[r++]=V}T=u?x(v.subarray(0,n)):x(v.slice(0,n));U=u?x(v.subarray(n)):x(v.slice(n));switch(this.e){case z:da(this,T,U);break;case A:ga(this,
T,U);break;default:m(Error("invalid inflate mode"))}break;default:m(Error("unknown BTYPE: "+a))}}switch(this.e){case A:var W;var la=0,za=this.c,X=this.g,Y,Z=new (u?Uint8Array:Array)(this.j+(this.b-32768)),w,K,L,ma;if(0===X.length)W=u?this.c.subarray(32768,this.b):this.c.slice(32768,this.b);else{w=0;for(K=X.length;w<K;++w){Y=X[w];L=0;for(ma=Y.length;L<ma;++L)Z[la++]=Y[L]}w=32768;for(K=this.b;w<K;++w)Z[la++]=za[w];this.g=[];W=this.buffer=Z}return W;case z:var F,G=this.b;u?this.o?(F=new Uint8Array(G),
F.set(this.c.subarray(0,G))):F=this.c.subarray(0,G):(this.c.length>G&&(this.c.length=G),F=this.c);return this.buffer=F;default:m(Error("invalid inflate mode"))}};
var ha=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],H=u?new Uint16Array(ha):ha,ia=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],na=u?new Uint16Array(ia):ia,oa=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],M=u?new Uint8Array(oa):oa,pa=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],qa=u?new Uint16Array(pa):pa,ra=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,
11,11,12,12,13,13],N=u?new Uint8Array(ra):ra,O=new (u?Uint8Array:Array)(288),P,sa;P=0;for(sa=O.length;P<sa;++P)O[P]=143>=P?8:255>=P?9:279>=P?7:8;var ea=x(O),ta=new (u?Uint8Array:Array)(30),Q,ua;Q=0;for(ua=ta.length;Q<ua;++Q)ta[Q]=5;var fa=x(ta);function B(a,c){var d=a.f,b=a.d,e=a.input,g=a.a,f;g+(c-b+7>>3)>=e.length&&m(Error("input buffer is broken"));for(;b<c;)d|=e[g++]<<b,b+=8;f=d&(1<<c)-1;a.f=d>>>c;a.d=b-c;a.a=g;return f}
function I(a,c){for(var d=a.f,b=a.d,e=a.input,g=a.a,f=e.length,l=c[0],h=c[1],k,n;b<h&&!(g>=f);)d|=e[g++]<<b,b+=8;k=l[d&(1<<h)-1];n=k>>>16;n>b&&m(Error("invalid code length: "+n));a.f=d>>n;a.d=b-n;a.a=g;return k&65535}
function ga(a,c,d){var b=a.c,e=a.b;a.l=c;for(var g=b.length-258,f,l,h,k;256!==(f=I(a,c));)if(256>f)e>=g&&(a.b=e,b=D(a),e=a.b),b[e++]=f;else{l=f-257;k=na[l];0<M[l]&&(k+=B(a,M[l]));f=I(a,d);h=qa[f];0<N[f]&&(h+=B(a,N[f]));e>=g&&(a.b=e,b=D(a),e=a.b);for(;k--;)b[e]=b[e++-h]}for(;8<=a.d;)a.d-=8,a.a--;a.b=e}
function da(a,c,d){var b=a.c,e=a.b;a.l=c;for(var g=b.length,f,l,h,k;256!==(f=I(a,c));)if(256>f)e>=g&&(b=E(a),g=b.length),b[e++]=f;else{l=f-257;k=na[l];0<M[l]&&(k+=B(a,M[l]));f=I(a,d);h=qa[f];0<N[f]&&(h+=B(a,N[f]));e+k>g&&(b=E(a),g=b.length);for(;k--;)b[e]=b[e++-h]}for(;8<=a.d;)a.d-=8,a.a--;a.b=e}
function D(a){var c=new (u?Uint8Array:Array)(a.b-32768),d=a.b-32768,b,e,g=a.c;if(u)c.set(g.subarray(32768,c.length));else{b=0;for(e=c.length;b<e;++b)c[b]=g[b+32768]}a.g.push(c);a.j+=c.length;if(u)g.set(g.subarray(d,d+32768));else for(b=0;32768>b;++b)g[b]=g[d+b];a.b=32768;return g}
function E(a,c){var d,b=a.input.length/a.a+1|0,e,g,f,l=a.input,h=a.c;c&&("number"===typeof c.m&&(b=c.m),"number"===typeof c.r&&(b+=c.r));2>b?(e=(l.length-a.a)/a.l[2],f=258*(e/2)|0,g=f<h.length?h.length+f:h.length<<1):g=h.length*b;u?(d=new Uint8Array(g),d.set(h)):d=h;a.c=d;return a.c};function va(a,c){var d,b;this.input=a;this.a=0;if(c||!(c={}))c.index&&(this.a=c.index),c.verify&&(this.s=c.verify);d=a[this.a++];b=a[this.a++];switch(d&15){case wa:this.method=wa;break;default:m(Error("unsupported compression method"))}0!==((d<<8)+b)%31&&m(Error("invalid fcheck flag:"+((d<<8)+b)%31));b&32&&m(Error("fdict flag is not supported"));this.n=new ba(a,{index:this.a,bufferSize:c.bufferSize,bufferType:c.bufferType,resize:c.resize})}
va.prototype.i=function(){var a=this.input,c,d;c=this.n.i();this.a=this.n.a;if(this.s){d=(a[this.a++]<<24|a[this.a++]<<16|a[this.a++]<<8|a[this.a++])>>>0;var b=c;if("string"===typeof b){var e=b.split(""),g,f;g=0;for(f=e.length;g<f;g++)e[g]=(e[g].charCodeAt(0)&255)>>>0;b=e}for(var l=1,h=0,k=b.length,n,p=0;0<k;){n=1024<k?1024:k;k-=n;do l+=b[p++],h+=l;while(--n);l%=65521;h%=65521}d!==(h<<16|l)>>>0&&m(Error("invalid adler-32 checksum"))}return c};var wa=8;s("Zlib.Inflate",va);s("Zlib.Inflate.prototype.decompress",va.prototype.i);var xa={ADAPTIVE:ca.p,BLOCK:ca.q},R,S,$,ya;if(Object.keys)R=Object.keys(xa);else for(S in R=[],$=0,xa)R[$++]=S;$=0;for(ya=R.length;$<ya;++$)S=R[$],s("Zlib.Inflate.BufferType."+S,xa[S]);}).call(this);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,